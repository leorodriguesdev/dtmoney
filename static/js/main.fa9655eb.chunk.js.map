{"version":3,"sources":["services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","assets/outcome.svg","assets/income.svg","assets/total.svg","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransaction","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","GlobalStyle","createGlobalStyle","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa9655eb.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n    baseURL: 'http://localhost:3000/api'\r\n})\r\n","import { type } from \"os\";\r\nimport { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { api } from \"../services/api\";\r\n\r\n\r\ninterface Transaction {\r\n    id: number;\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n    createdAt: string;\r\n  }\r\n\r\n\r\n// interface TransactionInput {\r\n//     title: string;\r\n//     amount: number;\r\n//     type: string;\r\n//     category: string;\r\n// }\r\n  \r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionsProviderProps {\r\n    children: ReactNode;\r\n  }\r\n\r\ninterface TransactionContextData {\r\n    transactions: Transaction[];\r\n    createTransaction: (Transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nconst TransactionsContext = createContext<TransactionContextData>(\r\n    {} as TransactionContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n\r\nconst [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\nuseEffect(() => {\r\n  api.get('transactions')\r\n    .then(response => setTransactions(response.data.transactions))\r\n}, []);\r\n\r\nasync function createTransaction(transactionInput: TransactionInput) {\r\n    const response = await api.post('/transactions', {\r\n        ...transactionInput,\r\n        createdAt: new Date(),\r\n    })\r\n    const { transaction } = response.data;\r\n\r\n\r\n    setTransactions([\r\n        ...transactions, \r\n        transaction,\r\n    ]);\r\n}\r\n\r\nreturn (\r\n    <TransactionsContext.Provider value={{transactions, createTransaction}}>\r\n        { children }\r\n    </TransactionsContext.Provider>\r\n)\r\n}\r\n\r\n\r\nexport function useTransaction() {\r\n    const context = useContext(TransactionsContext)\r\n\r\n    return context;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 2rem;\r\n    margin-top: -10rem;\r\n\r\n    div {\r\n        background: var(--shape);\r\n        padding: 1.5rem 2rem;\r\n        border-radius: 0.25rem;\r\n        color: var(--text-title);\r\n\r\n        header {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        strong {\r\n            display: block;\r\n            margin-top: 1rem;\r\n            font-size: 2rem;\r\n            font-weight: normal;\r\n            line-height: 3rem;\r\n        }\r\n\r\n        &.highlight-background {\r\n            background: var(--green);\r\n        }\r\n\r\n\r\n    }\r\n`","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import { Container } from \"./styles\";\r\nimport outcomeImg from '../../assets/outcome.svg'\r\nimport incomeImg from '../../assets/income.svg'\r\nimport totalImg from '../../assets/total.svg'\r\nimport { useTransaction } from \"../../hooks/useTransactions\";\r\n\r\nexport function Summary() {\r\n    const { transactions } = useTransaction();\r\n\r\n    const summary = transactions.reduce((acc, transaction) => {\r\n        if (transaction.type === 'deposit') {\r\n            acc.deposits += transaction.amount;\r\n            acc.total += transaction.amount;\r\n        } else {\r\n            acc.withdraws += transaction.amount;\r\n            acc.total -= transaction.amount;\r\n        }\r\n\r\n        return acc;\r\n    }, {\r\n        deposits: 0,\r\n        withdraws: 0,\r\n        total: 0,\r\n    });\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <header>\r\n                    <p>Entradas</p>\r\n                    <img src={incomeImg} alt=\"Entradas\" />\r\n                </header>\r\n                <strong>\r\n                {new Intl.NumberFormat('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.deposits)}\r\n                    </strong>\r\n            </div>\r\n            <div>\r\n                <header>\r\n                    <p>Saídas</p>\r\n                    <img src={outcomeImg} alt=\"Saídas\" />\r\n                </header>\r\n                <strong>\r\n                {summary.withdraws !== 0 ? '-' : ''}\r\n                {new Intl.NumberFormat('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.withdraws)}\r\n                </strong>\r\n            </div>\r\n            <div className=\"highlight-background\">\r\n                <header>\r\n                    <p>Total</p>\r\n                    <img src={totalImg} alt=\"Total\" />\r\n                </header>\r\n                <strong>\r\n                    {new Intl.NumberFormat('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: 'BRL'\r\n                    }).format(summary.total)}\r\n                </strong>\r\n            </div>\r\n        </Container>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 4rem;\r\n\r\n    table {\r\n        width: 100%;\r\n        border-spacing: 0 0.5rem;\r\n\r\n        th {\r\n            color: var(--text-body);\r\n            font-weight: 400;\r\n            text-align: left;\r\n            line-height: 1.5rem;\r\n        }\r\n\r\n        td {\r\n            padding: 1rem 2rem;\r\n            border: 0;\r\n            background: var(--shape);\r\n            color: var(--text-body);\r\n            border-radius: 0.25rem;\r\n            \r\n            &:first-child {\r\n                color: var(--text-title);  \r\n            }\r\n\r\n            &.deposit {\r\n                color: var(--green);\r\n            }\r\n\r\n            &.withdraw {\r\n                color: var(--red);\r\n            }\r\n        }\r\n    }\r\n`;","import { useTransaction } from \"../../hooks/useTransactions\";\r\nimport { Container } from \"./styles\";\r\n\r\n\r\nexport function TransactionsTable() {\r\n  const { transactions } = useTransaction();\r\n\r\n  return (\r\n\r\n    <Container>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Título</th>\r\n            <th>Valor</th>\r\n            <th>Categoria</th>\r\n            <th>Data</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {transactions.map(transaction => (\r\n              <tr key={transaction.id}>\r\n                <td> {transaction.title} </td>\r\n\r\n\r\n\r\n                <td className={transaction.type}>\r\n                  {new Intl.NumberFormat('pt-BR', {\r\n                    style: 'currency',\r\n                    currency: 'BRL'\r\n                  }).format(transaction.amount)}\r\n                </td>\r\n\r\n\r\n\r\n                <td> {transaction.category} </td>\r\n\r\n                <td>\r\n                  {new Intl.DateTimeFormat('pt-BR').format(\r\n                    new Date(transaction.createdAt)\r\n                  )}\r\n                </td>\r\n\r\n\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </Container>\r\n  );\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container  = styled.main`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n    padding: 2.5rem 1rem;\r\n\r\n`;\r\n","import { Summary } from \"../Summary\";\r\nimport { TransactionsTable } from \"../TransactionsTable\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Dashboard() {\r\n    return (\r\n        <Container>\r\n            <Summary/>\r\n            <TransactionsTable />\r\n        </Container>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n    background: var(--blue);\r\n`;\r\n\r\n\r\nexport const Content = styled.div`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2rem 1rem 12rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    button {\r\n        font-size: 1rem;\r\n        color: #fff;\r\n        background: var(--blue-light);\r\n        border: 0;\r\n        padding: 0 2rem;\r\n        border-radius: 0.25rem;\r\n        height: 3rem;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n\r\n`;","import logoImg from '../../assets/logo.svg'\r\nimport { Container, Content } from './styles'\r\n\r\ninterface HeaderProps {\r\n    onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal}: HeaderProps) {\r\n    return (\r\n        <Container>\r\n            <Content>\r\n            <img src={logoImg} alt=\"dt money\" />\r\n            <button type=\"button\" onClick={onOpenNewTransactionModal}>\r\n                Nova Transação\r\n            </button>\r\n\r\n            </Content>\r\n        </Container>\r\n    )\r\n}","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n        --background: #f0f2f5;\r\n        --red: #e52e4d;\r\n        --blue: #070928;\r\n        --green: #33cc95;\r\n\r\n        --blue-light: #3456ff;\r\n\r\n        --tex-title: #363f5f;\r\n        --tex-body: #969cb3;\r\n\r\n        --shape: #ffffff;\r\n\r\n    }\r\n    \r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: 0;\r\n\r\n    }\r\n\r\n    body {\r\n        background: var(--background);\r\n        -webkit-font-smoothing: antialiased;\r\n    }\r\n\r\n\r\n    html {\r\n        @media (max-width: 1080px) {\r\n            font-size: 93.75%; //15px\r\n        }\r\n\r\n        @media (max-width: 720px) {\r\n            font-size: 87.5%; // 14px\r\n        }\r\n    }\r\n\r\n    body, input, textarea, button {\r\n        font-family: 'Poppins', sans-serif;\r\n        font-weight: 400;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6, strong {\r\n        font-weight: 600;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n\r\n    [disabled] {\r\n        opacity: 0.6;\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    .react-modal-overlay {\r\n        background: rgba(0, 0, 0, 0.5);\r\n\r\n        position: fixed;\r\n        top: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        left: 0;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .react-modal-content {\r\n        width: 100%;\r\n        max-width: 576px;\r\n        background: var(--background);\r\n        padding: 3rem;\r\n        position: relative;\r\n        border-radius: 0.24rem;\r\n    }\r\n    \r\n    .react-modal-close {\r\n        position: absolute;\r\n        right: 1.5rem;\r\n        top: 1.5rem;\r\n        border: 0;\r\n        background: transparent;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.8);\r\n        }\r\n    }\r\n`","import styled from \"styled-components\";\r\nimport { darken, transparentize } from 'polished'\r\n\r\nexport const Container = styled.form`\r\n    h2{\r\n        color: var(--text-title);\r\n        font-size: 1.5rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        border-radius: 0.25rem;\r\n\r\n        box-sizing: border-box;\r\n\r\n        border: 1px solid #d7d7d7;\r\n        background: #e7e9ee;\r\n\r\n        font-weight: 400;\r\n        font-size: 1rem;\r\n\r\n        &::placeholder {\r\n            color: var(--text-body);\r\n        }\r\n\r\n        & + input {\r\n            margin-top: 1rem;\r\n        }\r\n        \r\n    }\r\n\r\n    input[type=number]::-webkit-inner-spin-button { \r\n            -webkit-appearance: none;\r\n    } \r\n\r\n    input[type=number] { \r\n        -moz-appearance: textfield;\r\n        appearance: textfield;\r\n    }\r\n\r\n    button[type=\"submit\"] {\r\n            width: 100%;\r\n            padding: 0 1.5rem; \r\n            height: 4rem;\r\n            background: var(--green);\r\n            color: #fff;\r\n            border-radius: 0.25rem;\r\n            border: 0;\r\n            font-size: 1rem;\r\n            margin-top: 1.5rem;\r\n            font-weight: 600;\r\n\r\n            transition: filter 0.2s;\r\n\r\n            &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n        }\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n    margin: 1rem 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.5rem;\r\n`;\r\n\r\ninterface RadioBoxProps {\r\n    isActive: boolean;\r\n    activeColor: 'green' | 'red';\r\n}\r\n\r\nconst colors = {\r\n    green: '#33cc95',\r\n    red: '#e52e4d'\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n        height: 4rem;\r\n        border: 1px solid #d7d7d7;\r\n        border-radius: 0.25rem;\r\n\r\n        background: ${(props) => props.isActive \r\n        ? transparentize(0.9, colors[props.activeColor])\r\n        : 'transparent'\r\n        };\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        transition: border-color 0.2s;\r\n\r\n        &:hover {\r\n            border-color: ${darken(0.1, '#d7d7d7')};\r\n        }\r\n\r\n        img {\r\n            width: 20px;\r\n            height: 20px;\r\n        }\r\n\r\n        span {\r\n            display: inline-block;\r\n            margin-left: 1rem;\r\n            font-size: 1rem;\r\n            color: var(--text-title);\r\n        }\r\n`;","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import Modal from 'react-modal'\r\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\r\nimport closeImg from \"../../assets/close.svg\"\r\nimport outcomeImg from \"../../assets/outcome.svg\"\r\nimport incomeImg from \"../../assets/income.svg\"\r\nimport { FormEvent, useState, useContext } from 'react';\r\nimport { api } from '../../services/api';\r\nimport { useTransaction } from '../../hooks/useTransactions';\r\n\r\n\r\n\r\n\r\ninterface NewTransactionModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\r\n    const { createTransaction } = useTransaction();\r\n  \r\n  \r\n    const [title, setTitle] = useState('')\r\n    const [amount, setAmount] = useState(0)\r\n    const [category, setCategory] = useState('')\r\n    const [type, setType] = useState('deposit')\r\n\r\n\r\n    async function handleCreateNewTransaction(event: FormEvent) {\r\n        event.preventDefault();\r\n\r\n        await createTransaction({\r\n            title,  \r\n            amount,\r\n            category,\r\n            type,\r\n        })\r\n\r\n        setTitle('');\r\n        setAmount(0);\r\n        setCategory('');\r\n        setType('deposit');\r\n        onRequestClose();\r\n    }\r\n    \r\n    return (\r\n        < Modal\r\n            isOpen={isOpen}\r\n            onRequestClose={onRequestClose}\r\n            overlayClassName=\"react-modal-overlay\"\r\n            className=\"react-modal-content\"\r\n        >\r\n            <button\r\n                type=\"button\"\r\n                onClick={onRequestClose}\r\n                className=\"react-modal-close\">\r\n                <img src={closeImg} alt=\"fechar modal\" />\r\n\r\n            </button>\r\n            <Container onSubmit={handleCreateNewTransaction}>\r\n                <h2>Cadastrar transação</h2>\r\n\r\n                <input\r\n                    placeholder=\"Título\"\r\n                    value={title}\r\n                    onChange={event => setTitle(event.target.value)}\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"Valor\"\r\n                    onChange={event => setAmount(Number(event.target.value))}\r\n                />\r\n\r\n                <TransactionTypeContainer>\r\n                    <RadioBox\r\n                        type=\"button\"\r\n                        isActive={type === 'deposit'}\r\n                        onClick={() => { setType('deposit'); }}\r\n                        activeColor=\"green\"\r\n                    >\r\n                        <img src={incomeImg} alt=\"Entrada\" />\r\n                        <span>Entrada</span>\r\n                    </RadioBox>\r\n                    <RadioBox\r\n                        type=\"button\"\r\n                        onClick={() => { setType('withdraw'); }}\r\n                        isActive={type === 'withdraw'}\r\n                        activeColor=\"red\"\r\n\r\n\r\n                    >\r\n                        <img src={outcomeImg} alt=\"Saída\" />\r\n                        <span>Saída</span>\r\n\r\n                    </RadioBox>\r\n                </TransactionTypeContainer>\r\n\r\n                <input\r\n                    placeholder=\"Categoria\"\r\n                    value={category}\r\n                    onChange={event => setCategory(event.target.value)}\r\n                />\r\n                <button type=\"submit\">\r\n                    Cadastrar\r\n                </button>\r\n            </Container>\r\n\r\n        </Modal >\r\n    );\r\n}","import { useTransaction, TransactionsProvider } from \"./../src/hooks/useTransactions\";\r\nimport { Dashboard } from \"./components/Dashboard\";\r\nimport { useState } from 'react'\r\nimport { Header } from \"./components/Header\";\r\nimport { GlobalStyle } from \"./styles/global\";\r\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\r\nimport Modal from 'react-modal'\r\n\r\n\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport function App() {\r\n\r\n    const [isNewTransactionModalOpen,setIsNewTransactionModalOpen] = useState(false);\r\n    \r\n\r\n    function handleOpenNewTransactionModal() {\r\n        setIsNewTransactionModalOpen(true);\r\n    }\r\n\r\n    function handleCloseNewTransactionModal() {\r\n        setIsNewTransactionModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <TransactionsProvider>\r\n            <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\r\n            <Dashboard/>\r\n            <NewTransactionModal\r\n                isOpen={isNewTransactionModalOpen}\r\n                onRequestClose={handleCloseNewTransactionModal}\r\n            />\r\n            <GlobalStyle/>\r\n        </TransactionsProvider>\r\n    );\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from './App';\r\nimport { createServer, Model } from 'miragejs'\r\n\r\ncreateServer({\r\n  models: {\r\n    transaction: Model,\r\n  },\r\n\r\n  seeds(server) {\r\n    server.db.loadData({\r\n      transactions: [\r\n        {\r\n          id: 1,\r\n          title: 'Freelancer de website',\r\n          type: 'deposit',\r\n          category: 'Dev',\r\n          amount: 900,\r\n          createdAt: new Date('2021-08-31 17:00:00'),      \r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'Aluguel',\r\n          type: 'withdraw',\r\n          category: 'Casa',\r\n          amount: 600,\r\n          createdAt: new Date('2021-08-31 17:00:00'),      \r\n        }\r\n      ],\r\n    })\r\n  },\r\n\r\n  routes() {\r\n    this.namespace = 'api';\r\n    this.get('/transactions', () => {\r\n      return this.schema.all('transaction')\r\n    })\r\n    this.post('/transactions', (schema, request) => {\r\n      const data = JSON.parse(request.requestBody)\r\n\r\n      return schema.create('transaction', data)\r\n    })\r\n  }\r\n})\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}